#!/bin/bash

# This script automates the setup of a Btrfs-based filesystem layout on Ubuntu.
# It mounts the root Btrfs partition, creates a predefined set of subvolumes
# (including user-specific ones like ~/bin and ~/dev), ensures mount points
# exist, and sets appropriate ownership for user directories.
#
# It's designed to be used after a fresh installation. It restores filesystem
# info from /etc/fstab.bak and prepares the system for a clean and reproducible
# /etc/fstab regeneration.
#
# generated by afreisinger/gen-fstab-plus.sh https://gist.github.com/afreisinger/ab82936d5434b83503562ed66534373e

if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit 1
fi

# Prompt for username (defaults to current user)
read -p "Enter your username (default: $USER): " inputUser
USER="${inputUser:-$USER}"

btrfsOptions="ssd,noatime,space_cache=v2,compress=lzo"

# Check that backup fstab exists
if [ ! -f /etc/fstab.bak ]; then
    echo "Error: /etc/fstab.bak not found. Aborting."
    exit 1
fi

# Parse filesystems from backup
getBootFS=$(awk '$3 == "vfat" {print $1}' /etc/fstab.bak)
getRootFS=$(awk '$3 == "btrfs" {print $1; exit}' /etc/fstab.bak)
getSwapFS=$(lsblk -ln -o NAME,FSTYPE,UUID | awk '$2 == "swap" {print "UUID=" $3}')

# Check that Btrfs root filesystem found 
if [ -z "$getRootFS" ]; then
    echo "Error: No Btrfs root filesystem found in /etc/fstab.bak."
    exit 1
fi

# List of expected subvolumes and mount points
declare -A subvolumes=(
    [@]="/"
    [@home]="/home"
   # [@log]="/var/log"
   # [@tmp]="/var/tmp"
   # [@cache]="/var/cache"
   # [@snapshots]="/.snapshots"
   # [@home/$USER/dev]="/home/$USER/dev"
   # [@home/$USER/bin]="/home/$USER/bin"
)

# Mount root volume if needed to create subvols
if ! mountpoint -q /mnt; then
    mount -o subvol=/ "$getRootFS" /mnt || {
        echo "Error: Failed to mount $getRootFS on /mnt."
        exit 1
    }
fi

# Create subvolumes
echo "Creating Btrfs subvolumes..."
for subvol in "${!subvolumes[@]}"; do
    subvolPath="/mnt/${subvol#/}"
    if [ ! -d "$subvolPath" ]; then
        mkdir -p "$(dirname "$subvolPath")"
        btrfs subvolume create "$subvolPath"
        echo "Created subvolume: $subvol"
    else
        echo "Subvolume already exists: $subvol"
    fi
done

# Create mount points
echo "Ensuring mount points exist..."
for mountPoint in "${subvolumes[@]}"; do
    if [ ! -d "$mountPoint" ]; then
        mkdir -p "$mountPoint"
        echo "Created mount point: $mountPoint"
    else
        echo "Mount point already exists: $mountPoint"
    fi
done

for mountPoint in "${subvolumes[@]}"; do
    if [ ! -d "$mountPoint" ]; then
        mkdir -p "$mountPoint"
        echo "Created mount point: $mountPoint"
    fi
done

# Ensure the user owns their personal subvolumes
chown -R "$USER:$USER" "/home/$USER/bin" "/home/$USER/dev"
chmod 755 "/home/$USER/bin" "/home/$USER/dev"

# Unmount temporary mount
echo "Cleaning up temporary mount..."
umount /mnt || {
    echo "Error: Failed to unmount /mnt."
    exit 1
}

echo "Generating new /etc/fstab.new..."

# Start fresh
cat <<EOF > /etc/fstab.new
# /etc/fstab: static file system information.
# generated by afreisnger/gen-fstab-plus.sh https://gist.github.com/afreisinger/ab82936d5434b83503562ed66534373e
# <file system> <mount point> <type>  <options> <dump>  <pass>
EOF

# EFI
echo -e "\n# EFI boot partition" >> /etc/fstab.new
echo "$getBootFS /boot/efi vfat defaults 0 1" >> /etc/fstab.new

# Btrfs root
echo -e "\n# Mount btrfs subvolumes" >> /etc/fstab.new

# Sort mount points by path
for subvol in $(for k in "${!subvolumes[@]}"; do
    echo "$k ${subvolumes[$k]}"
done | sort -k2 | awk '{print $1}'); do
    mountPoint="${subvolumes[$subvol]}"
    echo "$getRootFS $mountPoint btrfs subvol=$subvol,$btrfsOptions 0 0" >> /etc/fstab.new
done

# Swap
if [ -n "$getSwapFS" ]; then
    echo -e "\n# Swap" >> /etc/fstab.new
    echo "$getSwapFS none swap sw 0 0" >> /etc/fstab.new
fi

echo "New fstab saved to /etc/fstab.new"
